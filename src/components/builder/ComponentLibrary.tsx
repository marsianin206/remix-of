'use client';

import React, { useState, useMemo } from 'react';
import { Search, ChevronDown, ChevronRight } from 'lucide-react';
import { componentLibrary, categories, ComponentCategory } from '@/lib/component-library';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Input } from '@/components/ui/input';

export default function ComponentLibrary() {
  const [searchQuery, setSearchQuery] = useState('');
  const [expandedCategories, setExpandedCategories] = useState<Set<string>>(new Set(['headers', 'heroes', 'features']));

  const filteredComponents = useMemo(() => {
    if (!searchQuery) return componentLibrary;
    const query = searchQuery.toLowerCase();
    return componentLibrary.filter(
      comp => comp.name.toLowerCase().includes(query) || 
              comp.description.toLowerCase().includes(query) ||
              comp.category.toLowerCase().includes(query)
    );
  }, [searchQuery]);

  const componentsByCategory = useMemo(() => {
    const grouped: Record<string, typeof componentLibrary> = {};
    categories.forEach(cat => {
      grouped[cat] = filteredComponents.filter(comp => comp.category === cat);
    });
    return grouped;
  }, [filteredComponents]);

  const toggleCategory = (category: string) => {
    const newExpanded = new Set(expandedCategories);
    if (newExpanded.has(category)) {
      newExpanded.delete(category);
    } else {
      newExpanded.add(category);
    }
    setExpandedCategories(newExpanded);
  };

  const handleDragStart = (e: React.DragEvent, component: typeof componentLibrary[0]) => {
    e.dataTransfer.effectAllowed = 'copy';
    e.dataTransfer.setData('component', JSON.stringify(component));
  };

  const categoryLabels: Record<string, string> = {
    headers: '–ó–∞–≥–æ–ª–æ–≤–∫–∏',
    navigation: '–ù–∞–≤–∏–≥–∞—Ü–∏—è',
    heroes: 'Hero –±–ª–æ–∫–∏',
    features: '–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏',
    pricing: '–¢–∞—Ä–∏—Ñ—ã',
    testimonials: '–û—Ç–∑—ã–≤—ã',
    teams: '–ö–æ–º–∞–Ω–¥–∞',
    forms: '–§–æ—Ä–º—ã',
    inputs: '–ü–æ–ª—è –≤–≤–æ–¥–∞',
    buttons: '–ö–Ω–æ–ø–∫–∏',
    cards: '–ö–∞—Ä—Ç–æ—á–∫–∏',
    galleries: '–ì–∞–ª–µ—Ä–µ–∏',
    footers: '–§—É—Ç–µ—Ä—ã',
    cta: 'CTA',
    blog: '–ë–ª–æ–≥',
    ecommerce: 'E-commerce',
    stats: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
    timelines: '–¢–∞–π–º–ª–∞–π–Ω—ã',
    tabs: '–¢–∞–±—ã',
    accordions: '–ê–∫–∫–æ—Ä–¥–µ–æ–Ω—ã',
    modals: '–ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞',
    alerts: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
    badges: '–ë–µ–π–¥–∂–∏',
    breadcrumbs: '–•–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏',
    pagination: '–ü–∞–≥–∏–Ω–∞—Ü–∏—è',
    progress: '–ü—Ä–æ–≥—Ä–µ—Å—Å',
    tooltips: '–ü–æ–¥—Å–∫–∞–∑–∫–∏',
    dropdowns: '–í—ã–ø–∞–¥–∞—é—â–∏–µ —Å–ø–∏—Å–∫–∏',
    sidebars: '–ë–æ–∫–æ–≤—ã–µ –ø–∞–Ω–µ–ª–∏',
    tables: '–¢–∞–±–ª–∏—Ü—ã',
    lists: '–°–ø–∏—Å–∫–∏',
    text: '–¢–µ–∫—Å—Ç',
    images: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
    videos: '–í–∏–¥–µ–æ',
    dividers: '–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏',
    maps: '–ö–∞—Ä—Ç—ã',
    social: '–°–æ—Ü—Å–µ—Ç–∏',
    contact: '–ö–æ–Ω—Ç–∞–∫—Ç—ã',
    login: '–í—Ö–æ–¥',
    register: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',
    dashboard: '–î–∞—à–±–æ—Ä–¥—ã',
    charts: '–ì—Ä–∞—Ñ–∏–∫–∏',
    calendars: '–ö–∞–ª–µ–Ω–¥–∞—Ä–∏',
    timepickers: '–í—Ä–µ–º—è',
    sliders: '–°–ª–∞–π–¥–µ—Ä—ã',
    toggles: '–ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏',
    checkboxes: '–ß–µ–∫–±–æ–∫—Å—ã',
    radios: '–†–∞–¥–∏–æ',
    selects: '–°–µ–ª–µ–∫—Ç—ã',
    textareas: '–¢–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è'
  };

  return (
    <div className="w-80 border-r border-border bg-background flex flex-col h-full">
      <div className="p-4 border-b border-border">
        <h2 className="text-lg font-bold mb-3">–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤</h2>
        <div className="relative">
          <Search className="absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-muted-foreground" />
          <Input
            type="text"
            placeholder="–ü–æ–∏—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="pl-9"
          />
        </div>
        <p className="text-xs text-muted-foreground mt-2">
          {filteredComponents.length} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        </p>
      </div>

      <ScrollArea className="flex-1">
        <div className="p-2">
          {categories.map(category => {
            const components = componentsByCategory[category];
            if (!components || components.length === 0) return null;

            const isExpanded = expandedCategories.has(category);

            return (
              <div key={category} className="mb-2">
                <button
                  onClick={() => toggleCategory(category)}
                  className="w-full flex items-center justify-between px-3 py-2 hover:bg-accent rounded-md text-sm font-medium"
                >
                  <span>{categoryLabels[category] || category}</span>
                  <div className="flex items-center gap-2">
                    <span className="text-xs text-muted-foreground">{components.length}</span>
                    {isExpanded ? <ChevronDown className="w-4 h-4" /> : <ChevronRight className="w-4 h-4" />}
                  </div>
                </button>

                {isExpanded && (
                  <div className="mt-1 space-y-1 ml-2">
                    {components.map(component => (
                      <div
                        key={component.id}
                        draggable
                        onDragStart={(e) => handleDragStart(e, component)}
                        className="p-3 bg-card hover:bg-accent border border-border rounded-md cursor-move transition-colors"
                      >
                        <div className="flex items-start gap-2">
                          <div className="text-xl">üì¶</div>
                          <div className="flex-1 min-w-0">
                            <p className="text-sm font-medium truncate">{component.name}</p>
                            <p className="text-xs text-muted-foreground mt-0.5 line-clamp-2">
                              {component.description}
                            </p>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            );
          })}
        </div>
      </ScrollArea>
    </div>
  );
}